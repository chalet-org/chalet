{
	"$schema": "http://json-schema.org/draft-07/schema",
	"type": "object",
	"additionalProperties": false,
	"required": [
		"version",
		"workspace",
		"targets"
	],
	"definitions": {
		"configurations-debugSymbols": {
			"type": "boolean",
			"description": "true to include debug symbols, false otherwise.",
			"default": false
		},
		"configurations-enableProfiling": {
			"type": "boolean",
			"description": "true to enable profiling for this configuration, false otherwise.",
			"default": false
		},
		"configurations-linkTimeOptimization": {
			"type": "boolean",
			"description": "true to use link-time optimization, false otherwise.",
			"default": false
		},
		"configurations-optimizations": {
			"type": "string",
			"description": "The optimization level of the build.",
			"enum": [
				"0",
				"1",
				"2",
				"3",
				"debug",
				"size",
				"fast"
			]
		},
		"configurations-stripSymbols": {
			"type": "boolean",
			"description": "true to strip symbols from the build, false otherwise.",
			"default": false
		},
		"distribution-configuration": {
			"type": "string",
			"description": "The name of the build configuration to use for the distribution."
		},
		"distribution-dependencies": {
			"type": "array",
			"uniqueItems": true,
			"items": {
				"type": "string"
			}
		},
		"distribution-description": {
			"type": "string"
		},
		"distribution-exclude": {
			"type": "array",
			"uniqueItems": true,
			"items": {
				"type": "string"
			}
		},
		"distribution-includeDependentSharedLibraries": {
			"type": "boolean",
			"default": true
		},
		"distribution-linux": {
			"type": "object",
			"description": "Variables to describe the linux application.",
			"additionalProperties": false,
			"required": [
				"icon",
				"desktopEntry"
			],
			"properties": {
				"desktopEntry": {
					"type": "string",
					"description": "The location to an XDG Desktop Entry template. If the file does not exist, it will be generated."
				},
				"icon": {
					"type": "string",
					"description": "The location to an icon to use for the application (PNG 256x256 is recommended)"
				}
			}
		},
		"distribution-macos": {
			"type": "object",
			"description": "Variables to describe the macos application bundle.",
			"additionalProperties": false,
			"required": [
				"bundleName",
				"infoPropertyList"
			],
			"properties": {
				"bundleName": {
					"type": "string"
				},
				"dmgBackground": {
					"anyOf": [
						{
							"type": "string"
						},
						{
							"type": "object",
							"required": [
								"1x"
							],
							"properties": {
								"1x": {
									"type": "string"
								},
								"2x": {
									"type": "string"
								}
							}
						}
					]
				},
				"dylibs": {
					"items": {
						"type": "string"
					},
					"uniqueItems": true,
					"type": "array"
				},
				"icon": {
					"type": "string"
				},
				"infoPropertyList": {
					"anyOf": [
						{
							"type": "string"
						},
						{
							"type": "object",
							"default": {
								"CFBundleName": "${bundleName}",
								"CFBundleDisplayName": "${name}",
								"CFBundleIdentifier": "com.developer.app",
								"CFBundleVersion": "${version}",
								"CFBundleDevelopmentRegion": "en",
								"CFBundleInfoDictionaryVersion": "6.0",
								"CFBundlePackageType": "APPL",
								"CFBundleSignature": "????",
								"CFBundleExecutable": "${mainProject}",
								"CFBundleIconFile": "${icon}",
								"NSHighResolutionCapable": true
							}
						}
					]
				},
				"makeDmg": {
					"type": "boolean",
					"description": "If true, a .dmg image will be built",
					"default": false
				}
			}
		},
		"distribution-mainProject": {
			"type": "string",
			"description": "The main executable project."
		},
		"distribution-outDir": {
			"type": "string",
			"description": "The output folder to place the final build along with all of its dependencies.",
			"default": "dist"
		},
		"distribution-projects": {
			"type": "array",
			"uniqueItems": true,
			"description": "An array of projects to include",
			"items": {
				"type": "string",
				"description": "The name of the project",
				"pattern": "^[\\w\\-\\+\\.]{3,}$"
			}
		},
		"distribution-windows": {
			"type": "object",
			"description": "Variables to describe the windows application.",
			"additionalProperties": false,
			"required": [
				"icon"
			],
			"properties": {
				"icon": {
					"type": "string",
					"description": "The windows icon to use for the project"
				}
			}
		},
		"distribution-bundle": {
			"type": "object",
			"additionalProperties": false,
			"description": "Variables to describe the final output build.",
			"required": [
				"configuration",
				"projects"
			],
			"properties": {
				"configuration": {
					"$ref": "#/definitions/distribution-configuration"
				},
				"dependencies": {
					"$ref": "#/definitions/distribution-dependencies"
				},
				"description": {
					"$ref": "#/definitions/distribution-description"
				},
				"exclude": {
					"$ref": "#/definitions/distribution-exclude"
				},
				"includeDependentSharedLibraries": {
					"$ref": "#/definitions/distribution-includeDependentSharedLibraries"
				},
				"linux": {
					"$ref": "#/definitions/distribution-linux"
				},
				"macos": {
					"$ref": "#/definitions/distribution-macos"
				},
				"mainProject": {
					"$ref": "#/definitions/distribution-mainProject"
				},
				"outDir": {
					"$ref": "#/definitions/distribution-outDir"
				},
				"projects": {
					"$ref": "#/definitions/distribution-projects"
				},
				"windows": {
					"$ref": "#/definitions/distribution-windows"
				}
			},
			"patternProperties": {
				"^dependencies(:debug|:!debug|)(\\.windows|\\.macos|\\.linux|\\.\\!windows|\\.\\!macos|\\.\\!linux|)$": {
					"$ref": "#/definitions/distribution-dependencies"
				},
				"^exclude(:debug|:!debug|)(\\.windows|\\.macos|\\.linux|\\.\\!windows|\\.\\!macos|\\.\\!linux|)$": {
					"$ref": "#/definitions/distribution-exclude"
				}
			}
		},
		"externalDependency-repository": {
			"type": "string",
			"description": "The url of the git repository.",
			"pattern": "^(?:git|ssh|https?|git@[-\\w.]+):(\\/\\/)?(.*?)(\\.git)(\\/?|\\#[-\\d\\w._]+?)$"
		},
		"externalDependency-branch": {
			"type": "string",
			"description": "The branch to checkout. Defaults to 'master'",
			"default": "master"
		},
		"externalDependency-commit": {
			"type": "string",
			"description": "The SHA1 hash of the commit to checkout.",
			"pattern": "^[0-9a-f]{7,40}$"
		},
		"externalDependency-tag": {
			"type": "string",
			"description": "The tag to checkout on the selected branch. If it's blank or not found, the head of the branch will be checked out."
		},
		"externalDependency-submodules": {
			"type": "boolean",
			"description": "Do submodules need to be cloned?",
			"default": false
		},
		"externalDependency": {
			"type": "object",
			"oneOf": [
				{
					"additionalProperties": false,
					"required": [
						"repository",
						"tag"
					],
					"properties": {
						"repository": {
							"$ref": "#/definitions/externalDependency-repository"
						},
						"submodules": {
							"$ref": "#/definitions/externalDependency-submodules"
						},
						"tag": {
							"$ref": "#/definitions/externalDependency-tag"
						}
					}
				},
				{
					"additionalProperties": false,
					"required": [
						"repository"
					],
					"properties": {
						"repository": {
							"$ref": "#/definitions/externalDependency-repository"
						},
						"submodules": {
							"$ref": "#/definitions/externalDependency-submodules"
						},
						"branch": {
							"$ref": "#/definitions/externalDependency-branch"
						},
						"commit": {
							"$ref": "#/definitions/externalDependency-commit"
						}
					}
				}
			]
		},
		"enum-platform": {
			"type": "string",
			"enum": [
				"windows",
				"macos",
				"linux"
			]
		},
		"environment-path": {
			"type": "array",
			"description": "Any additional paths to include.",
			"uniqueItems": true,
			"items": {
				"type": "string"
			}
		},
		"target-description": {
			"type": "string",
			"description": "A description of the target to display during the build."
		},
		"target-notInConfiguration": {
			"description": "Don't compile this project in specific build configuration(s)",
			"oneOf": [
				{
					"type": "string"
				},
				{
					"type": "array",
					"uniqueItems": true,
					"items": {
						"type": "string"
					}
				}
			]
		},
		"target-notInPlatform": {
			"description": "Don't compile this project on specific platform(s)",
			"oneOf": [
				{
					"$ref": "#/definitions/enum-platform"
				},
				{
					"type": "array",
					"uniqueItems": true,
					"items": {
						"$ref": "#/definitions/enum-platform"
					}
				}
			]
		},
		"target-onlyInConfiguration": {
			"description": "Only compile this project in specific build configuration(s)",
			"oneOf": [
				{
					"type": "string"
				},
				{
					"type": "array",
					"uniqueItems": true,
					"items": {
						"type": "string"
					}
				}
			]
		},
		"target-onlyInPlatform": {
			"description": "Only compile this project on specific platform(s)",
			"oneOf": [
				{
					"$ref": "#/definitions/enum-platform"
				},
				{
					"type": "array",
					"uniqueItems": true,
					"items": {
						"$ref": "#/definitions/enum-platform"
					}
				}
			]
		},
		"target-project-settings-cxx": {
			"type": "object",
			"additionalProperties": false,
			"properties": {
				"cStandard": {
					"$ref": "#/definitions/target-project-cxx-cStandard"
				},
				"compileOptions": {
					"$ref": "#/definitions/target-project-cxx-compileOptions"
				},
				"cppStandard": {
					"$ref": "#/definitions/target-project-cxx-cppStandard"
				},
				"defines": {
					"$ref": "#/definitions/target-project-cxx-defines"
				},
				"includeDirs": {
					"$ref": "#/definitions/target-project-cxx-includeDirs"
				},
				"libDirs": {
					"$ref": "#/definitions/target-project-cxx-libDirs"
				},
				"linkerScript": {
					"$ref": "#/definitions/target-project-cxx-linkerScript"
				},
				"linkerOptions": {
					"$ref": "#/definitions/target-project-cxx-linkerOptions"
				},
				"links": {
					"$ref": "#/definitions/target-project-cxx-links"
				},
				"macosFrameworkPaths": {
					"$ref": "#/definitions/target-project-cxx-macosFrameworkPaths"
				},
				"macosFrameworks": {
					"$ref": "#/definitions/target-project-cxx-macosFrameworks"
				},
				"objectiveCxx": {
					"$ref": "#/definitions/target-project-cxx-objectiveCxx"
				},
				"pch": {
					"$ref": "#/definitions/target-project-cxx-pch"
				},
				"threads": {
					"$ref": "#/definitions/target-project-cxx-threads"
				},
				"rtti": {
					"$ref": "#/definitions/target-project-cxx-rtti"
				},
				"staticLinking": {
					"$ref": "#/definitions/target-project-cxx-staticLinking"
				},
				"staticLinks": {
					"$ref": "#/definitions/target-project-cxx-staticLinks"
				},
				"warnings": {
					"$ref": "#/definitions/target-project-cxx-warnings"
				},
				"windowsPrefixOutputFilename": {
					"$ref": "#/definitions/target-project-cxx-windowsPrefixOutputFilename"
				},
				"windowsOutputDef": {
					"$ref": "#/definitions/target-project-cxx-windowsOutputDef"
				},
				"windowsApplicationManifest": {
					"$ref": "#/definitions/target-project-cxx-windowsApplicationManifest"
				}
			},
			"patternProperties": {
				"^cStandard(\\.windows|\\.macos|\\.linux|\\.\\!windows|\\.\\!macos|\\.\\!linux|)$": {
					"$ref": "#/definitions/target-project-cxx-cStandard"
				},
				"^cppStandard(\\.windows|\\.macos|\\.linux|\\.\\!windows|\\.\\!macos|\\.\\!linux|)$": {
					"$ref": "#/definitions/target-project-cxx-cppStandard"
				},
				"^compileOptions(\\.windows|\\.macos|\\.linux|\\.\\!windows|\\.\\!macos|\\.\\!linux|)$": {
					"$ref": "#/definitions/target-project-cxx-compileOptions"
				},
				"^defines(:debug|:!debug|)(\\.windows|\\.macos|\\.linux|\\.\\!windows|\\.\\!macos|\\.\\!linux|)$": {
					"$ref": "#/definitions/target-project-cxx-defines"
				},
				"^includeDirs(\\.windows|\\.macos|\\.linux|\\.\\!windows|\\.\\!macos|\\.\\!linux|)$": {
					"$ref": "#/definitions/target-project-cxx-includeDirs"
				},
				"^libDirs(\\.windows|\\.macos|\\.linux|\\.\\!windows|\\.\\!macos|\\.\\!linux|)$": {
					"$ref": "#/definitions/target-project-cxx-libDirs"
				},
				"^linkerScript(\\.windows|\\.macos|\\.linux|\\.\\!windows|\\.\\!macos|\\.\\!linux|)$": {
					"$ref": "#/definitions/target-project-cxx-linkerScript"
				},
				"^linkerOptions(\\.windows|\\.macos|\\.linux|\\.\\!windows|\\.\\!macos|\\.\\!linux|)$": {
					"$ref": "#/definitions/target-project-cxx-linkerOptions"
				},
				"^links(:debug|:!debug|)(\\.windows|\\.macos|\\.linux|\\.\\!windows|\\.\\!macos|\\.\\!linux|)$": {
					"$ref": "#/definitions/target-project-cxx-links"
				},
				"^objectiveCxx(\\.windows|\\.macos|\\.linux|\\.\\!windows|\\.\\!macos|\\.\\!linux|)$": {
					"$ref": "#/definitions/target-project-cxx-objectiveCxx"
				},
				"^staticLinks(:debug|:!debug|)(\\.windows|\\.macos|\\.linux|\\.\\!windows|\\.\\!macos|\\.\\!linux|)$": {
					"$ref": "#/definitions/target-project-cxx-staticLinks"
				},
				"^threads(:debug|:!debug|)(\\.windows|\\.macos|\\.linux|\\.\\!windows|\\.\\!macos|\\.\\!linux|)$": {
					"$ref": "#/definitions/target-project-cxx-threads"
				},
				"^rtti(:debug|:!debug|)(\\.windows|\\.macos|\\.linux|\\.\\!windows|\\.\\!macos|\\.\\!linux|)$": {
					"$ref": "#/definitions/target-project-cxx-rtti"
				},
				"^staticLinking(:debug|:!debug|)(\\.windows|\\.macos|\\.linux|\\.\\!windows|\\.\\!macos|\\.\\!linux|)$": {
					"$ref": "#/definitions/target-project-cxx-staticLinking"
				}
			}
		},
		"target-project": {
			"type": "object",
			"additionalProperties": false,
			"properties": {
				"settings:Cxx": {
					"$ref": "#/definitions/target-project-settings-cxx"
				},
				"extends": {
					"$ref": "#/definitions/target-project-extends"
				},
				"files": {
					"$ref": "#/definitions/target-project-files"
				},
				"kind": {
					"$ref": "#/definitions/target-project-kind"
				},
				"language": {
					"$ref": "#/definitions/target-project-language"
				},
				"location": {
					"$ref": "#/definitions/target-project-location"
				},
				"onlyInConfiguration": {
					"$ref": "#/definitions/target-onlyInConfiguration"
				},
				"notInConfiguration": {
					"$ref": "#/definitions/target-notInConfiguration"
				},
				"onlyInPlatform": {
					"$ref": "#/definitions/target-onlyInPlatform"
				},
				"notInPlatform": {
					"$ref": "#/definitions/target-notInPlatform"
				},
				"runProject": {
					"$ref": "#/definitions/target-project-runProject"
				},
				"runArguments": {
					"$ref": "#/definitions/target-project-runArguments"
				},
				"runDependencies": {
					"$ref": "#/definitions/target-project-runDependencies"
				}
			},
			"patternProperties": {
				"^runProject(:debug|:!debug|)(\\.windows|\\.macos|\\.linux|\\.\\!windows|\\.\\!macos|\\.\\!linux|)$": {
					"$ref": "#/definitions/target-project-runProject"
				},
				"^runDependencies(:debug|:!debug|)(\\.windows|\\.macos|\\.linux|\\.\\!windows|\\.\\!macos|\\.\\!linux|)$": {
					"$ref": "#/definitions/target-project-runDependencies"
				}
			}
		},
		"target-project-cxx-windowsPrefixOutputFilename": {
			"type": "boolean",
			"description": "Only applies to dynamic library targets (kind=sharedLibrary) on windows. If true, prefixes the output dll with 'lib'. This may not be desirable with standalone dlls.",
			"default": true
		},
		"target-project-cxx-cStandard": {
			"type": "string",
			"description": "The C standard to use in the compilation",
			"enum": [
				"c90",
				"c89",
				"iso9899:1990",
				"iso9899:199409",
				"c99",
				"c9x",
				"iso9899:1999",
				"iso9899:199x",
				"c11",
				"c1x",
				"iso9899:2011",
				"c17",
				"c18",
				"iso9899:2017",
				"iso9899:2018",
				"c2x",
				"gnu90",
				"gnu89",
				"gnu99",
				"gnu9x",
				"gnu11",
				"gnu1x",
				"gnu17",
				"gnu18",
				"gnu2x"
			],
			"default": "c11"
		},
		"target-project-cxx-compileOptions": {
			"type": "array",
			"uniqueItems": true,
			"description": "Options to add during the compilation step.",
			"items": {
				"type": "string"
			}
		},
		"target-project-cxx-cppStandard": {
			"type": "string",
			"description": "The C++ standard to use in the compilation",
			"enum": [
				"c++98",
				"c++03",
				"gnu++98",
				"gnu++03",
				"c++11",
				"C++0x",
				"gnu++11",
				"gnu++0x",
				"c++14",
				"c++1y",
				"gnu++14",
				"gnu++1y",
				"c++17",
				"c++1z",
				"gnu++17",
				"gnu++1z",
				"c++20",
				"c++2a",
				"gnu++20",
				"gnu++2a"
			],
			"default": "c++17"
		},
		"target-project-cxx-defines": {
			"type": "array",
			"uniqueItems": true,
			"description": "Macro definitions to be used by the preprocessor",
			"items": {
				"type": "string"
			}
		},
		"target-project-cxx-includeDirs": {
			"type": "array",
			"uniqueItems": true,
			"description": "A list of directories to include with the project.",
			"items": {
				"type": "string"
			}
		},
		"target-project-extends": {
			"type": "string",
			"description": "A project template to extend. Defaults to 'all' implicitly.",
			"pattern": "^[A-Za-z_-]+$",
			"default": "all"
		},
		"target-project-files": {
			"type": "array",
			"uniqueItems": true,
			"description": "Explicitly define the source files, relative to the working directory.",
			"items": {
				"type": "string"
			}
		},
		"target-project-kind": {
			"type": "string",
			"description": "The type of the project's compiled binary.",
			"enum": [
				"staticLibrary",
				"sharedLibrary",
				"consoleApplication",
				"desktopApplication"
			]
		},
		"target-project-language": {
			"type": "string",
			"description": "The target language of the project.",
			"enum": [
				"C",
				"C++"
			],
			"default": "C++"
		},
		"target-project-cxx-libDirs": {
			"type": "array",
			"uniqueItems": true,
			"description": "Fallback search paths to look for static or dynamic libraries (/usr/lib is included by default)",
			"items": {
				"type": "string"
			}
		},
		"target-project-cxx-linkerScript": {
			"type": "string",
			"description": "An LD linker script path (.ld file) to pass to the linker command"
		},
		"target-project-cxx-linkerOptions": {
			"type": "array",
			"uniqueItems": true,
			"description": "Options to add during the linking step.",
			"items": {
				"type": "string"
			}
		},
		"target-project-cxx-links": {
			"type": "array",
			"uniqueItems": true,
			"description": "A list of dynamic links to use with the linker",
			"items": {
				"type": "string",
				"pattern": "^[\\w\\-\\+\\.]+$"
			}
		},
		"target-project-location": {
			"description": "The root path of the source files, relative to the working directory.",
			"oneOf": [
				{
					"type": "string"
				},
				{
					"type": "array",
					"uniqueItems": true,
					"items": {
						"type": "string"
					}
				},
				{
					"type": "object",
					"additionalProperties": false,
					"required": [
						"include"
					],
					"patternProperties": {
						"^exclude(:debug|:!debug|)(\\.windows|\\.macos|\\.linux|\\.\\!windows|\\.\\!macos|\\.\\!linux|)$": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "array",
									"uniqueItems": true,
									"items": {
										"type": "string"
									}
								}
							]
						},
						"^include(:debug|:!debug|)(\\.windows|\\.macos|\\.linux|\\.\\!windows|\\.\\!macos|\\.\\!linux|)$": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "array",
									"uniqueItems": true,
									"items": {
										"type": "string"
									}
								}
							]
						}
					}
				}
			]
		},
		"target-project-cxx-macosFrameworkPaths": {
			"type": "array",
			"uniqueItems": true,
			"description": "A list of paths to search for MacOS Frameworks",
			"items": {
				"type": "string"
			}
		},
		"target-project-cxx-macosFrameworks": {
			"type": "array",
			"uniqueItems": true,
			"description": "",
			"items": {
				"type": "string"
			}
		},
		"target-project-cxx-objectiveCxx": {
			"type": "boolean",
			"description": "Set to true if compiling Objective-C or Objective-C++ files (.m or .mm), or including any Objective-C/C++ headers.",
			"default": false
		},
		"target-project-cxx-pch": {
			"type": "string",
			"description": "Compile a header file as a pre-compiled header and include it in compilation of every object file in the project. Define a path relative to the workspace root."
		},
		"target-project-cxx-threads": {
			"type": "string",
			"enum": [
				"auto",
				"posix",
				"none"
			],
			"default": "auto"
		},
		"target-project-cxx-rtti": {
			"type": "boolean",
			"description": "true to include run-time type information (default), false to exclude.",
			"default": true
		},
		"target-project-runProject": {
			"type": "boolean",
			"description": "Is this the main project to run during run-related commands (buildrun & run)?\n\nIf multiple targets are defined as true, the first will be chosen to run. If a command-line runProject is given, it will be prioritized.",
			"default": false
		},
		"target-project-runArguments": {
			"type": "array",
			"description": "If the project is the run target, a string of arguments to pass to the run command.",
			"items": {
				"type": "string"
			}
		},
		"target-project-runDependencies": {
			"type": "array",
			"uniqueItems": true,
			"description": "If the project is the run target, a list of dynamic libraries that should be copied before running.",
			"items": {
				"type": "string"
			}
		},
		"target-script-script": {
			"anyOf": [
				{
					"type": "string"
				},
				{
					"type": "array",
					"uniqueItems": true,
					"items": {
						"type": "string"
					}
				}
			]
		},
		"target-project-cxx-staticLinking": {
			"description": "true to statically link against compiler libraries (libc++, etc.). false to dynamically link them.",
			"type": "boolean",
			"default": false
		},
		"target-project-cxx-staticLinks": {
			"type": "array",
			"uniqueItems": true,
			"description": "A list of static links to use with the linker",
			"items": {
				"type": "string",
				"pattern": "^[\\w\\-\\+\\.]+$"
			}
		},
		"target-project-cxx-warnings": {
			"description": "Either a preset of the warnings to use, or the warnings flags themselves (excluding '-W' prefix)",
			"anyOf": [
				{
					"type": "string",
					"enum": [
						"none",
						"minimal",
						"error",
						"pedantic",
						"strict",
						"strictPedantic",
						"veryStrict"
					]
				},
				{
					"type": "array",
					"items": {
						"type": "string",
						"uniqueItems": true,
						"enum": [
							"abi",
							"absolute-value",
							"address",
							"aggregate-return",
							"all",
							"alloc-size-larger-than=CC_ALLOC_SIZE_LARGER_THAN",
							"alloc-zero",
							"alloca",
							"alloca-larger-than=CC_ALLOCA_LARGER_THAN",
							"arith-conversion",
							"array-bounds",
							"array-bounds=1",
							"array-bounds=2",
							"array-parameter",
							"array-parameter=1",
							"array-parameter=2",
							"attribute-alias",
							"attribute-alias=0",
							"attribute-alias=1",
							"attribute-alias=2",
							"bad-function-cast",
							"bool-compare",
							"bool-operation",
							"c90-c99-compat",
							"c99-c11-compat",
							"c11-c2x-compat",
							"c++-compat",
							"c++11-compat",
							"c++14-compat",
							"c++17-compat",
							"c++20-compat",
							"cast-align",
							"cast-align=strict",
							"cast-function-type",
							"cast-qual",
							"catch-value",
							"char-subscripts",
							"clobbered",
							"comment",
							"comments",
							"conversion",
							"dangling-else",
							"date-time",
							"declaration-after-statement",
							"deprecated-copy",
							"disabled-optimization",
							"double-promotion",
							"duplicate-decl-specifier",
							"duplicated-branches",
							"duplicated-cond",
							"empty-body",
							"enum-compare",
							"enum-conversion",
							"effc++",
							"extra",
							"error",
							"expansion-to-defined",
							"fatal-errors",
							"float-conversion",
							"float-equal",
							"format",
							"format=0",
							"format=1",
							"format=2",
							"format-nonliteral",
							"format-overflow",
							"format-overflow=1",
							"format-overflow=2",
							"format-security",
							"format-signedness",
							"format-truncation",
							"format-truncation=1",
							"format-truncation=2",
							"format-y2k",
							"frame-address",
							"frame-larger-than=CC_FRAME_LARGER_THAN",
							"ignored-qualifiers",
							"implicit-fallthrough",
							"implicit-fallthrough=0",
							"implicit-fallthrough=1",
							"implicit-fallthrough=2",
							"implicit-fallthrough=3",
							"implicit-fallthrough=4",
							"implicit-fallthrough=5",
							"implicit",
							"implicit-int",
							"implicit-function-declaration",
							"init-self",
							"inline",
							"int-in-bool-context",
							"invalid-memory-model",
							"invalid-pch",
							"jump-misses-init",
							"larger-than=CC_LARGER_THAN",
							"logical-not-parentheses",
							"logical-op",
							"long-long",
							"main",
							"maybe-uninitialized",
							"memset-elt-size",
							"memset-transposed-args",
							"misleading-indentation",
							"missing-attributes",
							"missing-braces",
							"missing-declarations",
							"missing-field-initializers",
							"missing-include-dirs",
							"missing-parameter-type",
							"missing-prototypes",
							"multistatement-macros",
							"narrowing",
							"nested-externs",
							"no-address-of-packed-member",
							"no-aggressive-loop-optimizations",
							"no-alloc-size-larger-than",
							"no-alloca-larger-than",
							"no-attribute-alias",
							"no-attribute-warning",
							"no-attributes",
							"no-builtin-declaration-mismatch",
							"no-builtin-macro-redefined",
							"no-coverate-mismatch",
							"no-cpp",
							"no-deprecated",
							"no-deprecated-declarations",
							"no-designated-init",
							"no-discarded-qualifier",
							"no-discarded-array-qualifiers",
							"no-div-by-zero",
							"no-endif-labels",
							"no-incompatible-pointer-types",
							"no-int-conversion",
							"no-format-contains-nul",
							"no-format-extra-args",
							"no-format-zero-length",
							"no-frame-larger-than",
							"no-free-nonheap-object",
							"no-if-not-aligned",
							"no-ignored-attributes",
							"no-implicit-int",
							"no-implicit-function-declaration",
							"no-int-to-pointer-cast",
							"no-invalid-memory-model",
							"no-larger-than",
							"no-long-long",
							"no-lto-type-mismatch",
							"no-missing-profile",
							"no-missing-field-initializers",
							"no-multichar",
							"no-odr",
							"no-overflow",
							"no-overlength-strings",
							"no-override-init-side-effects",
							"no-pedantic-ms-format",
							"no-pointer-compare",
							"no-pointer-to-int-cast",
							"no-pragmas",
							"no-prio-ctor-dtor",
							"no-return-local-addr",
							"no-scalar-storage-order",
							"no-shadow-ivar",
							"no-shift-count-negative",
							"no-shift-count-overflow",
							"no-shift-overflow",
							"no-sizeof-array-argument",
							"no-stack-usage",
							"no-stringop-overflow",
							"no-stringop-overread",
							"no-stringop-truncation",
							"no-switch-bool",
							"no-switch-outside-range",
							"no-switch-unreachable",
							"no-trigraphs",
							"no-unused-function",
							"no-unused-result",
							"no-unused-variable",
							"no-varargs",
							"no-variadic-macros",
							"no-vla",
							"no-vla-larger-than",
							"noexcept",
							"non-virtual-dtor",
							"nonnull",
							"nonnull-compare",
							"nopacked-bitfield-compat",
							"normalized=none",
							"normalized=id",
							"normalized=nfc",
							"normalized=nfkc",
							"null-dereference",
							"odr",
							"old-style-cast",
							"old-style-declaration",
							"old-style-definition",
							"openmp-simd",
							"overlength-strings",
							"overloaded-virtual",
							"override-init",
							"packed",
							"packed-not-aligned",
							"padded",
							"parentheses",
							"pedantic",
							"pedantic-errors",
							"pessimizing-move",
							"pointer-arith",
							"pointer-sign",
							"range-loop-construct",
							"redundant-decls",
							"redundant-move",
							"reorder",
							"restrict",
							"return-type",
							"scrict-null-sentinel",
							"sequence-point",
							"shadow",
							"shadow=global",
							"shadow=local",
							"shadow=compatible-local",
							"shift-negative-value",
							"shift-overflow=1",
							"shift-overflow=2",
							"sign-compare",
							"sign-conversion",
							"sign-promo",
							"sizeof-array-div",
							"sizeof-pointer-div",
							"sizeof-pointer-memaccess",
							"stack-protector",
							"stack-usage=CC_STACK_USAGE",
							"strict-aliasing",
							"strict-aliasing=1",
							"strict-aliasing=2",
							"strict-aliasing=3",
							"strict-overflow",
							"strict-overflow=1",
							"strict-overflow=2",
							"strict-overflow=3",
							"strict-overflow=4",
							"strict-overflow=5",
							"strict-prototypes",
							"string-compare",
							"stringop-overflow",
							"stringop-overflow=1",
							"stringop-overflow=2",
							"stringop-overflow=3",
							"stringop-overflow=4",
							"suggest-attribute=pure",
							"suggest-attribute=const",
							"suggest-attribute=noreturn",
							"suggest-attribute=format",
							"suggest-attribute=cold",
							"suggest-attribute=malloc",
							"switch",
							"switch-default",
							"switch-enum",
							"switch-unreachable",
							"sync-nand",
							"system-headers",
							"tautological-compare",
							"traditional",
							"traditional-conversion",
							"trampolines",
							"trigraphs",
							"type-limits",
							"undef",
							"uninitialized",
							"unknown-pragmas",
							"unreachable-code",
							"unsafe-loop-optimizations",
							"unsuffixed-float-constants",
							"unused",
							"unused-but-set-parameter",
							"unused-but-set-variable",
							"unused-const-variable",
							"unused-const-variable=1",
							"unused-const-variable=2",
							"unused-function",
							"unused-label",
							"unused-local-typedefs",
							"unused-macros",
							"unused-parameter",
							"unused-value",
							"unused-variable",
							"variadic-macros",
							"vector-operation-performance",
							"vla",
							"vla-larger-than=CC_VLA_LARGER_THAN",
							"vla-parameter",
							"volatile-register-var",
							"write-strings",
							"zero-as-null-pointer-constant",
							"zero-length-bounds"
						]
					}
				}
			]
		},
		"target-project-cxx-windowsApplicationManifest": {
			"description": "The path to a Windows application manifest to .",
			"type": "string"
		},
		"target-project-cxx-windowsOutputDef": {
			"type": "boolean",
			"description": "If true for a dynamic library (dll) target on Windows, a .def file will be created",
			"default": false
		},
		"target-script": {
			"type": "object",
			"additionalProperties": false,
			"properties": {
				"script": {
					"description": "Script(s) to run during this build step.",
					"$ref": "#/definitions/target-script-script"
				},
				"description": {
					"$ref": "#/definitions/target-description"
				}
			},
			"patternProperties": {
				"^script(:debug|:!debug|)(\\.windows|\\.macos|\\.linux|\\.\\!windows|\\.\\!macos|\\.\\!linux|)$": {
					"description": "Script(s) to run during this build step.",
					"$ref": "#/definitions/target-script-script"
				},
				"^description(:debug|:!debug|)(\\.windows|\\.macos|\\.linux|\\.\\!windows|\\.\\!macos|\\.\\!linux|)$": {
					"$ref": "#/definitions/target-description"
				}
			}
		},
		"target-cmake-cmake": {
			"type": "boolean",
			"description": "true of Cmake project.",
			"default": true
		},
		"target-cmake-location": {
			"type": "string",
			"description": "The location of the root CMakeLists.txt for the project."
		},
		"target-cmake-buildScript": {
			"type": "string",
			"description": "Pre-load a script to populate the cache. (-C)"
		},
		"target-cmake-defines": {
			"type": "array",
			"uniqueItems": true,
			"description": "Macro definitions to be passed into CMake. (-D)",
			"items": {
				"type": "string"
			}
		},
		"target-cmake-recheck": {
			"type": "boolean",
			"description": "If true, CMake will be invoked each time during the build. This might not be desirable (a library that doesn't get built each time), so it defaults to false.",
			"default": false
		},
		"target-cmake-toolset": {
			"type": "string",
			"description": "A toolset to be passed to CMake with the -T option."
		},
		"target-cmake": {
			"type": "object",
			"additionalProperties": false,
			"required": [
				"cmake",
				"location"
			],
			"description": "Build the location with cmake",
			"properties": {
				"description": {
					"$ref": "#/definitions/target-description"
				},
				"location": {
					"$ref": "#/definitions/target-cmake-location"
				},
				"buildScript": {
					"$ref": "#/definitions/target-cmake-buildScript"
				},
				"cmake": {
					"$ref": "#/definitions/target-cmake-cmake"
				},
				"defines": {
					"$ref": "#/definitions/target-cmake-defines"
				},
				"toolset": {
					"$ref": "#/definitions/target-cmake-toolset"
				},
				"recheck": {
					"$ref": "#/definitions/target-cmake-recheck"
				},
				"onlyInConfiguration": {
					"$ref": "#/definitions/target-onlyInConfiguration"
				},
				"notInConfiguration": {
					"$ref": "#/definitions/target-notInConfiguration"
				},
				"onlyInPlatform": {
					"$ref": "#/definitions/target-onlyInPlatform"
				},
				"notInPlatform": {
					"$ref": "#/definitions/target-notInPlatform"
				}
			},
			"patternProperties": {
				"^description(:debug|:!debug|)(\\.windows|\\.macos|\\.linux|\\.\\!windows|\\.\\!macos|\\.\\!linux|)$": {
					"$ref": "#/definitions/target-description"
				},
				"^buildScript(:debug|:!debug|)(\\.windows|\\.macos|\\.linux|\\.\\!windows|\\.\\!macos|\\.\\!linux|)$": {
					"$ref": "#/definitions/target-cmake-buildScript"
				},
				"^defines(:debug|:!debug|)(\\.windows|\\.macos|\\.linux|\\.\\!windows|\\.\\!macos|\\.\\!linux|)$": {
					"$ref": "#/definitions/target-cmake-defines"
				},
				"^toolset(:debug|:!debug|)(\\.windows|\\.macos|\\.linux|\\.\\!windows|\\.\\!macos|\\.\\!linux|)$": {
					"$ref": "#/definitions/target-cmake-toolset"
				}
			}
		}
	},
	"properties": {
		"abstracts": {
			"type": "object",
			"additionalProperties": false,
			"description": "A list of abstract build projects",
			"patternProperties": {
				"^[A-Za-z_-]+$": {
					"description": "An abstract build project. 'all' is implicitely added to each project.",
					"$ref": "#/definitions/target-project"
				}
			}
		},
		"distribution": {
			"type": "object",
			"additionalProperties": false,
			"description": "A list of bundle descriptors for the distribution.",
			"patternProperties": {
				"^[\\w\\-\\+\\.\\ \\(\\)]{3,}$": {
					"description": "A single bundle or script.",
					"oneOf": [
						{
							"$ref": "#/definitions/distribution-bundle"
						},
						{
							"$ref": "#/definitions/target-script"
						}
					]
				}
			}
		},
		"configurations": {
			"anyOf": [
				{
					"type": "object",
					"additionalProperties": false,
					"description": "A list of allowed build configurations",
					"patternProperties": {
						"^[\\w\\-\\+\\.]{3,}$": {
							"type": "object",
							"additionalProperties": false,
							"properties": {
								"debugSymbols": {
									"$ref": "#/definitions/configurations-debugSymbols"
								},
								"enableProfiling": {
									"$ref": "#/definitions/configurations-enableProfiling"
								},
								"linkTimeOptimization": {
									"$ref": "#/definitions/configurations-linkTimeOptimization"
								},
								"optimizations": {
									"$ref": "#/definitions/configurations-optimizations"
								},
								"stripSymbols": {
									"$ref": "#/definitions/configurations-stripSymbols"
								}
							}
						}
					}
				},
				{
					"type": "array",
					"uniqueItems": true,
					"description": "An array of allowed build configuration presets",
					"items": {
						"type": "string",
						"description": "A configuration preset",
						"enum": [
							"Release",
							"Debug",
							"RelWithDebInfo",
							"MinSizeRel",
							"Profile"
						]
					}
				}
			]
		},
		"externalDependencies": {
			"type": "object",
			"additionalProperties": false,
			"description": "A sequential list of externalDependencies to install prior to building or via the configure command. The key will be the destination directory name for the repository within the folder defined in 'externalDepDir'.",
			"patternProperties": {
				"^[\\w\\-\\+\\.]{3,100}$": {
					"description": "A single external dependency.",
					"$ref": "#/definitions/externalDependency"
				}
			}
		},
		"targets": {
			"type": "object",
			"additionalProperties": false,
			"description": "A sequential list of projects, cmake projects, or scripts.",
			"patternProperties": {
				"^[\\w\\-\\+\\.]{3,}$": {
					"description": "A single build target or script.",
					"oneOf": [
						{
							"$ref": "#/definitions/target-project"
						},
						{
							"$ref": "#/definitions/target-cmake"
						},
						{
							"$ref": "#/definitions/target-script"
						}
					]
				}
			}
		},
		"version": {
			"type": "string",
			"description": "Version of the workspace project.",
			"pattern": "^[\\w\\-\\+\\.]+$"
		},
		"workspace": {
			"type": "string",
			"description": "The name of the workspace.",
			"pattern": "^[\\w\\-\\+ ]+$"
		},
		"externalDepDir": {
			"type": "string",
			"description": "The path to install external dependencies into (see externalDependencies).",
			"default": "chalet_external"
		},
		"path": {
			"$ref": "#/definitions/environment-path"
		}
	},
	"patternProperties": {
		"^abstracts:[a-z]+$": {
			"description": "An abstract build project. 'abstracts:all' is a special project that gets implicitely added to each project",
			"$ref": "#/definitions/target-project"
		},
		"^path(:debug|:!debug|)(\\.windows|\\.macos|\\.linux|\\.\\!windows|\\.\\!macos|\\.\\!linux|)$": {
			"$ref": "#/definitions/environment-path"
		}
	}
}
