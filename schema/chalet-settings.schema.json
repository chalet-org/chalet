{
	"$schema": "http://json-schema.org/draft-07/schema",
	"type": "object",
	"additionalProperties": false,
	"definitions": {
		"theme-color": {
			"type": "string",
			"description": "An ANSI color to apply.",
			"enum": [
				"black",
				"blackBold",
				"blackDim",
				"blackInverted",
				"blue",
				"blueBold",
				"blueDim",
				"blueInverted",
				"brightBlack",
				"brightBlackBold",
				"brightBlackDim",
				"brightBlackInverted",
				"brightBlue",
				"brightBlueBold",
				"brightBlueDim",
				"brightBlueInverted",
				"brightCyan",
				"brightCyanBold",
				"brightCyanDim",
				"brightCyanInverted",
				"brightGreen",
				"brightGreenBold",
				"brightGreenDim",
				"brightGreenInverted",
				"brightMagenta",
				"brightMagentaBold",
				"brightMagentaDim",
				"brightMagentaInverted",
				"brightRed",
				"brightRedBold",
				"brightRedDim",
				"brightRedInverted",
				"brightWhite",
				"brightWhiteBold",
				"brightWhiteDim",
				"brightWhiteInverted",
				"brightYellow",
				"brightYellowBold",
				"brightYellowDim",
				"brightYellowInverted",
				"cyan",
				"cyanBold",
				"cyanDim",
				"cyanInverted",
				"green",
				"greenBold",
				"greenDim",
				"greenInverted",
				"magenta",
				"magentaBold",
				"magentaDim",
				"magentaInverted",
				"red",
				"redBold",
				"redDim",
				"redInverted",
				"reset",
				"white",
				"whiteBold",
				"whiteDim",
				"whiteInverted",
				"yellow",
				"yellowBold",
				"yellowDim",
				"yellowInverted"
			]
		},
		"toolchain": {
			"type": "object",
			"description": "A list of compilers and tools needing for the build itself.",
			"additionalProperties": false,
			"properties": {
				"archiver": {
					"type": "string",
					"description": "The executable path to the toolchain's static library archive utility - typically ar with GCC, libtool on MacOS, or lib.exe with Visual Studio.",
					"default": "/usr/bin/ar"
				},
				"buildPathStyle": {
					"type": "string",
					"description": "The build path style, with the configuration appended by an underscore. Examples:\nconfiguration: build/Debug\narchitecture: build/x86_64_Debug\ntarget-triple: build/x64-linux-gnu_Debug\ntoolchain-name: build/my-cool-toolchain_name_Debug",
					"enum": [
						"target-triple",
						"toolchain-name",
						"configuration",
						"architecture"
					],
					"default": "target-triple"
				},
				"cmake": {
					"type": "string",
					"description": "The executable path to CMake.",
					"default": "/usr/local/bin/cmake"
				},
				"compilerC": {
					"type": "string",
					"description": "The executable path to the toolchain's C compiler.",
					"default": "/usr/bin/cc"
				},
				"compilerCpp": {
					"type": "string",
					"description": "The executable path to the toolchain's C++ compiler.",
					"default": "/usr/bin/c++"
				},
				"compilerWindowsResource": {
					"type": "string",
					"description": "The executable path to the resource compiler. (Windows)"
				},
				"disassembler": {
					"type": "string",
					"description": "The executable path to the toolchain's disassembler (if applicable) - for instance, objdump with GCC, dumpbin with MSVC, and otool with Apple LLVM."
				},
				"linker": {
					"type": "string",
					"description": "The executable path to the toolchain's linker - typically ld with GCC, lld with LLVM, or link.exe with Visual Studio.",
					"default": "/usr/bin/ld"
				},
				"make": {
					"type": "string",
					"description": "The executable path to GNU make, or NMAKE/Qt Jom with Visual Studio.",
					"default": "/usr/bin/make"
				},
				"ninja": {
					"type": "string",
					"description": "The executable path to Ninja."
				},
				"profiler": {
					"type": "string",
					"description": "The executable path to the toochain's command-line profiler (if applicable) - for instance, gprof with GCC.",
					"default": "/usr/bin/gprof"
				},
				"strategy": {
					"type": "string",
					"description": "The strategy to use during the build.",
					"enum": [
						"makefile",
						"ninja",
						"native-experimental",
						"msbuild",
						"xcodebuild"
					],
					"default": "makefile"
				},
				"version": {
					"type": "string",
					"description": "A version string to identify the toolchain. If MSVC, this must be the full version string of the Visual Studio Installation. (vswhere's installationVersion string)"
				}
			}
		}
	},
	"properties": {
		"options": {
			"type": "object",
			"description": "A list of settings related to the build.",
			"properties": {
				"architecture": {
					"type": "string",
					"description": "The architecture id to use for building, if not the previous one."
				},
				"benchmark": {
					"type": "boolean",
					"description": "true to show all build times (total build time, build targets, other steps) (default), false to hide them.",
					"default": true
				},
				"configuration": {
					"type": "string",
					"description": "The build configuration to use for building, if not the previous one."
				},
				"distributionDir": {
					"type": "string",
					"description": "The root directory of all distribution bundles."
				},
				"dumpAssembly": {
					"type": "boolean",
					"description": "true to use create an asm dump of each file in the build, false otherwise (default).",
					"default": false
				},
				"envFile": {
					"type": "string",
					"description": "A file to load environment variables from.",
					"default": ".env"
				},
				"externalDir": {
					"type": "string",
					"description": "The directory to install external dependencies into prior to the rest of the build's run.",
					"default": "chalet_external"
				},
				"generateCompileCommands": {
					"type": "boolean",
					"description": "true to generate a compile_commands.json file for Clang tooling use, false otherwise (default).",
					"default": false
				},
				"onlyRequired": {
					"type": "boolean",
					"description": "true to only build targets required by the target given at the command line (if not all), false otherwise (default).",
					"default": false
				},
				"inputFile": {
					"type": "string",
					"description": "An input build file to use.",
					"default": "chalet.json"
				},
				"keepGoing": {
					"type": "boolean",
					"description": "true to continue as much of the build as possible if there's a build error, false to halt on error (default).",
					"default": false
				},
				"launchProfiler": {
					"type": "boolean",
					"description": "If running profile targets, true to launch the preferred profiler afterwards (default), false to just generate the output files.",
					"default": true
				},
				"maxJobs": {
					"type": "integer",
					"description": "The number of jobs to run during compilation (default: the number of cpu cores).",
					"minimum": 1
				},
				"outputDir": {
					"type": "string",
					"description": "The output directory of the build.",
					"default": "build"
				},
				"rootDir": {
					"type": "string",
					"description": "The root directory to run the build from."
				},
				"lastTarget": {
					"type": "string",
					"description": "The last build target used (or ran), or 'all' if one was not specified."
				},
				"runArguments": {
					"type": "object",
					"description": "An object of key/values where the key is the run target name, and the value is the run arguments that were used last."
				},
				"showCommands": {
					"type": "boolean",
					"description": "true to show the commands run during the build, false to just show the source file (default).",
					"default": false
				},
				"signingIdentity": {
					"type": "string",
					"description": "The code-signing identity to use when bundling the application distribution."
				},
				"osTargetName": {
					"type": "string",
					"description": "The name of the operating system to target the build for. On macOS, this corresponds to the lower-case identifier of the Apple SDK (see 'appleSdks')"
				},
				"osTargetVersion": {
					"type": "string",
					"description": "The version of the operating system to target the build for."
				},
				"toolchain": {
					"type": "string",
					"description": "The toolchain id to use for building, if not the previous one."
				}
			}
		},
		"tools": {
			"type": "object",
			"description": "A list of additional tools for the platform.",
			"properties": {
				"bash": {
					"type": "string",
					"description": "The executable path to GNU Bourne-Again SHell.",
					"default": "/usr/bin/bash"
				},
				"command_prompt": {
					"type": "string",
					"description": "The executable path to Command Prompt. (Windows)",
					"default": "C:/Windows/System32/cmd.exe"
				},
				"codesign": {
					"type": "string",
					"description": "The executable path to Apple's codesign command-line utility. (MacOS)",
					"default": "/usr/bin/codesign"
				},
				"git": {
					"type": "string",
					"description": "The executable path to Git.",
					"default": "/usr/bin/git"
				},
				"hdiutil": {
					"type": "string",
					"description": "The executable path to Apple's hdiutil command-line utility. (MacOS)",
					"default": "/usr/bin/hdiutil"
				},
				"install_name_tool": {
					"type": "string",
					"description": "The executable path to Apple's install_name_tool command-line utility. (MacOS)",
					"default": "/usr/bin/install_name_tool"
				},
				"instruments": {
					"type": "string",
					"description": "The executable path to Apple's instruments command-line utility. (MacOS)",
					"default": "/usr/bin/instruments"
				},
				"ldd": {
					"type": "string",
					"description": "The executable path to ldd.",
					"default": "/usr/bin/ldd"
				},
				"osascript": {
					"type": "string",
					"description": "The executable path to Apple's osascript command-line utility. (MacOS)",
					"default": "/usr/bin/osascript"
				},
				"otool": {
					"type": "string",
					"description": "The executable path to Apple's otool command-line utility. (MacOS)",
					"default": "/usr/bin/otool"
				},
				"plutil": {
					"type": "string",
					"description": "The executable path to Apple's plutil command-line utility. (MacOS)",
					"default": "/usr/bin/plutil"
				},
				"powershell": {
					"type": "string",
					"description": "The executable path to Powershell. (Windows)",
					"default": "C:/Windows/System32/WindowsPowerShell/v1.0/powershell.exe"
				},
				"sample": {
					"type": "string",
					"description": "The executable path to Apple's sample command-line utility. (MacOS)",
					"default": "/usr/bin/sample"
				},
				"sips": {
					"type": "string",
					"description": "The executable path to Apple's sips command-line utility. (MacOS)",
					"default": "/usr/bin/sips"
				},
				"tar": {
					"type": "string",
					"description": "The executable path to tar.",
					"default": "/usr/bin/tar"
				},
				"tiffutil": {
					"type": "string",
					"description": "The executable path to Apple's tiffutil command-line utility. (MacOS)",
					"default": "/usr/bin/tiffutil"
				},
				"xcodebuild": {
					"type": "string",
					"description": "The executable path to Apple's xcodebuild command-line utility. (MacOS)",
					"default": "/usr/bin/xcodebuild"
				},
				"xcrun": {
					"type": "string",
					"description": "The executable path to Apple's xcrun command-line utility. (MacOS)",
					"default": "/usr/bin/xcrun"
				},
				"zip": {
					"type": "string",
					"description": "The executable path to zip.",
					"default": "/usr/bin/zip"
				}
			}
		},
		"toolchains": {
			"type": "object",
			"description": "A list of toolchains.",
			"patternProperties": {
				"^[\\w\\-+.]{3,}$": {
					"oneOf": [
						{
							"$ref": "#/definitions/toolchain"
						},
						{
							"type": "object",
							"patternProperties": {
								"^[\\w\\-+.]{3,}$": {
									"$ref": "#/definitions/toolchain",
									"description": "A list of compilers and tools needing for this toolchain architecture."
								}
							},
							"additionalProperties": false
						}
					]
				}
			}
		},
		"appleSdks": {
			"type": "object",
			"description": "A list of Apple platform SDK paths. (MacOS)"
		},
		"theme": {
			"description": "The color theme preset or colors to give to Chalet",
			"oneOf": [
				{
					"type": "string",
					"minLength": 1,
					"enum": [
						"default",
						"none",
						"palapa",
						"highrise",
						"teahouse",
						"skilodge",
						"temple",
						"bungalow",
						"cottage",
						"monastery",
						"longhouse",
						"greenhouse",
						"observatory",
						"yurt",
						"sealab"
					],
					"default": "default"
				},
				{
					"type": "string",
					"minLength": 1,
					"pattern": "^[0-9a-fA-F]{1,8}$",
					"default": "default"
				},
				{
					"type": "object",
					"additionalProperties": false,
					"properties": {
						"info": {
							"$ref": "#/definitions/theme-color"
						},
						"error": {
							"$ref": "#/definitions/theme-color"
						},
						"warning": {
							"$ref": "#/definitions/theme-color"
						},
						"success": {
							"$ref": "#/definitions/theme-color"
						},
						"note": {
							"$ref": "#/definitions/theme-color"
						},
						"flair": {
							"$ref": "#/definitions/theme-color"
						},
						"header": {
							"$ref": "#/definitions/theme-color"
						},
						"build": {
							"$ref": "#/definitions/theme-color"
						},
						"assembly": {
							"$ref": "#/definitions/theme-color"
						}
					}
				}
			]
		},
		"lastUpdateCheck": {
			"type": "number",
			"description": "The time of the last Chalet update check."
		}
	}
}
