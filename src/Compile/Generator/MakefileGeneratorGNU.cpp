/*
	Distributed under the OSI-approved BSD 3-Clause License.
	See accompanying file LICENSE.txt for details.
*/

#include "Compile/Generator/MakefileGeneratorGNU.hpp"

#include "State/AncillaryTools.hpp"
#include "State/BuildInfo.hpp"
#include "State/BuildPaths.hpp"
#include "State/BuildState.hpp"
#include "State/CompilerTools.hpp"
#include "Terminal/Commands.hpp"
#include "Terminal/Environment.hpp"
#include "Terminal/Output.hpp"
#include "Terminal/Unicode.hpp"
#include "Utility/List.hpp"
#include "Utility/String.hpp"

namespace chalet
{
/*****************************************************************************/
MakefileGeneratorGNU::MakefileGeneratorGNU(const BuildState& inState) :
	IStrategyGenerator(inState)
{
	// m_generateDependencies = inToolchain->type() != ToolchainType::VisualStudio && !Environment::isContinuousIntegrationServer();
	m_generateDependencies = true;
}

/*****************************************************************************/
void MakefileGeneratorGNU::addProjectRecipes(const SourceTarget& inProject, const SourceOutputs& inOutputs, CompileToolchain& inToolchain, const std::string& inTargetHash)
{
	m_project = &inProject;
	m_toolchain = inToolchain.get();
	m_hash = inTargetHash;

	const auto& target = inOutputs.target;

	const std::string buildRecipes = getBuildRecipes(inOutputs);
	const auto printer = getPrinter();

	//
	//
	//
	//
	// ==============================================================================
	std::string makeTemplate = fmt::format(R"makefile(
{buildRecipes}
build_{hash}: {target}
	@{printer}
.PHONY: build_{hash}
)makefile",
		fmt::arg("hash", m_hash),
		FMT_ARG(printer),
		FMT_ARG(buildRecipes),
		FMT_ARG(target));

	m_targetRecipes.emplace_back(std::move(makeTemplate));

	m_toolchain = nullptr;
	m_project = nullptr;
}

/*****************************************************************************/
std::string MakefileGeneratorGNU::getContents(const std::string& inPath) const
{
	UNUSED(inPath);

	const auto& depDir = m_state.paths.depDir();
	// const auto suffixes = String::getPrefixed(m_fileExtensions, ".");

#if defined(CHALET_WIN32)
	const auto shell = "cmd.exe";
#else
	const auto shell = "/bin/sh";
#endif

	auto recipes = String::join(m_targetRecipes);

	std::string makeTemplate = fmt::format(R"makefile(# Generated by Chalet

.SUFFIXES:

SHELL := {shell}{recipes}
.PRECIOUS: {depDir}/%.d
{depDir}/%.d: ;

-include $(DEPS_{hash})
)makefile",
		fmt::arg("hash", m_hash),
		// FMT_ARG(suffixes),
		FMT_ARG(shell),
		FMT_ARG(recipes),
		FMT_ARG(depDir));

	return makeTemplate;
}

/*****************************************************************************/
void MakefileGeneratorGNU::reset()
{
	m_targetRecipes.clear();
	// m_fileExtensions.clear();
	m_locationCache.clear();
}

/*****************************************************************************/
std::string MakefileGeneratorGNU::getBuildRecipes(const SourceOutputs& inOutputs)
{
	chalet_assert(m_project != nullptr, "");

	/*for (auto& ext : inOutputs.fileExtensions)
	{
		List::addIfDoesNotExist(m_fileExtensions, ext);
	}*/

	const auto pchTarget = m_state.paths.getPrecompiledHeaderTarget(*m_project);
	const auto& pch = m_project->pch();

	std::string recipes = getPchRecipe(pch, pchTarget);

	for (auto& ext : String::filterIf(m_state.paths.cxxExtensions(), inOutputs.fileExtensions))
	{
		recipes += getCxxRecipe(ext, pchTarget);
	}

	if (m_project->objectiveCxx())
	{
		for (auto& ext : String::filterIf(m_state.paths.objectiveCxxExtensions(), inOutputs.fileExtensions))
		{
			recipes += getObjcRecipe(ext);
		}
	}

	if (m_state.toolchain.canCompilerWindowsResources())
	{
		for (auto& ext : String::filterIf(m_state.paths.resourceExtensions(), inOutputs.fileExtensions))
		{
			recipes += getRcRecipe(ext, pchTarget);
		}
	}

	recipes += getTargetRecipe(inOutputs.target);

	return recipes;
}

/*****************************************************************************/
std::string MakefileGeneratorGNU::getCompileEchoSources(const std::string& inFile) const
{
	const auto color = Output::getAnsiStyleForMakefile(Output::theme().build);
	std::string printer;

	if (Output::cleanOutput())
	{
		printer = getPrinter(fmt::format("   {}{}", color, inFile), true);
	}
	else
	{
		printer = getPrinter(std::string(color));
	}

	return fmt::format("@{}", printer);
}

/*****************************************************************************/
std::string MakefileGeneratorGNU::getLinkerEcho() const
{
	const auto color = Output::getAnsiStyleForMakefile(Output::theme().build);
	std::string printer;

	if (Output::cleanOutput())
	{
		const std::string description = m_project->isStaticLibrary() ? "Archiving" : "Linking";
		const auto text = fmt::format("{color}   {description} $@", FMT_ARG(color), FMT_ARG(description));
		printer = getPrinter(text, true);
	}
	else
	{
		printer = getPrinter(std::string(color));
	}

	return fmt::format("@{}", printer);
}

/*****************************************************************************/
std::string MakefileGeneratorGNU::getPchRecipe(const std::string& source, const std::string& object)
{
	chalet_assert(m_project != nullptr, "");
	chalet_assert(m_toolchain != nullptr, "");

	std::string ret;

	const bool usePch = m_project->usesPch();

	const auto& objDir = m_state.paths.objDir();
	auto pchCache = fmt::format("{}/{}", objDir, source);

	if (usePch && !List::contains(m_precompiledHeaders, pchCache))
	{
		// auto pchAbsolute = Commands::getAbsolutePath(source);
		const auto quietFlag = getQuietFlag();
		const auto& depDir = m_state.paths.depDir();
		m_precompiledHeaders.emplace_back(std::move(pchCache));

		const auto dependency = fmt::format("{}/{}.d", depDir, source);

#if defined(CHALET_MACOS)
		if (m_state.info.targetArchitecture() == Arch::Cpu::UniversalMacOS)
		{
			auto baseFolder = String::getPathFolder(object);
			auto filename = String::getPathFilename(object);

			std::string lastArch;
			for (auto& arch : m_state.info.universalArches())
			{
				auto outObject = fmt::format("{}_{}/{}", baseFolder, arch, filename);
				auto dependencies = source;

				if (!lastArch.empty())
				{
					dependencies += fmt::format(" {}_{}/{}", baseFolder, lastArch, filename);
				}

				auto pchCompile = String::join(m_toolchain->compilerCxx->getPrecompiledHeaderCommand("$<", "$@", m_generateDependencies, dependency, arch));
				if (!pchCompile.empty())
				{
					auto pch = String::getPathFolderBaseName(object);
					String::replaceAll(pch, fmt::format("{}/", objDir), "");
					pch += fmt::format(" ({})", arch);
					const auto compileEcho = getCompileEchoSources(pch);
					ret += fmt::format(R"makefile(
{outObject}: {dependencies} | {dependency}
	{compileEcho}
	{quietFlag}{pchCompile}
)makefile",
						FMT_ARG(outObject),
						FMT_ARG(dependencies),
						FMT_ARG(compileEcho),
						FMT_ARG(quietFlag),
						FMT_ARG(pchCompile),
						FMT_ARG(dependency));
				}
				lastArch = arch;
			}
		}
		else
#endif
		{
			auto pchCompile = String::join(m_toolchain->compilerCxx->getPrecompiledHeaderCommand("$<", "$@", m_generateDependencies, dependency, std::string()));
			if (!pchCompile.empty())
			{
				auto pch = String::getPathFolderBaseName(object);
				String::replaceAll(pch, fmt::format("{}/", objDir), "");
				const auto compileEcho = getCompileEchoSources(pch);
				ret += fmt::format(R"makefile(
{object}: {source} | {dependency}
	{compileEcho}
	{quietFlag}{pchCompile}
)makefile",
					FMT_ARG(object),
					FMT_ARG(source),
					FMT_ARG(compileEcho),
					FMT_ARG(quietFlag),
					FMT_ARG(pchCompile),
					FMT_ARG(dependency));
			}
		}
	}

	return ret;
}

/*****************************************************************************/
std::string MakefileGeneratorGNU::getRcRecipe(const std::string& ext, const std::string& pchTarget)
{
	chalet_assert(m_project != nullptr, "");
	chalet_assert(m_toolchain != nullptr, "");

	std::string ret;

	const auto quietFlag = getQuietFlag();
	const auto& depDir = m_state.paths.depDir();
	const auto& objDir = m_state.paths.objDir();
	const auto compileEcho = getCompileEchoSources();

	for (auto& location : m_project->locations())
	{
		if (locationExists(location, ext))
			continue;

		const auto dependency = fmt::format("{}/{}/$*.{}.d", depDir, location, ext);

		auto rcCompile = String::join(m_toolchain->compilerWindowsResource->getCommand("$<", "$@", m_generateDependencies, dependency));
		if (!rcCompile.empty())
		{
			std::string makeDependency;
			if (m_generateDependencies && m_state.toolchain.isCompilerWindowsResourceLLVMRC())
			{
				makeDependency = fmt::format("\n\t@{}", getFallbackMakeDependsCommand(dependency, "$<", "$@"));
			}

			ret += fmt::format(R"makefile(
{objDir}/{location}/%.{ext}.res: {location}/%.{ext} {pchTarget} | {depDir}/{location}/%.{ext}.d
	{compileEcho}
	{quietFlag}{rcCompile}{makeDependency}
)makefile",
				FMT_ARG(objDir),
				FMT_ARG(depDir),
				FMT_ARG(ext),
				FMT_ARG(location),
				FMT_ARG(pchTarget),
				FMT_ARG(dependency),
				FMT_ARG(compileEcho),
				FMT_ARG(quietFlag),
				FMT_ARG(rcCompile),
				FMT_ARG(makeDependency));

			m_locationCache[location].push_back(ext);
		}
	}

	return ret;
}

/*****************************************************************************/
std::string MakefileGeneratorGNU::getCxxRecipe(const std::string& ext, const std::string& pchTarget)
{
	chalet_assert(m_project != nullptr, "");
	chalet_assert(m_toolchain != nullptr, "");

	std::string ret;

	const auto quietFlag = getQuietFlag();
	const auto& depDir = m_state.paths.depDir();
	const auto& objDir = m_state.paths.objDir();
	const auto compileEcho = getCompileEchoSources();
	const auto specialization = m_project->language() == CodeLanguage::CPlusPlus ? CxxSpecialization::CPlusPlus : CxxSpecialization::C;

	for (auto& location : m_project->locations())
	{
		if (locationExists(location, ext))
			continue;

		const auto dependency = fmt::format("{}/{}/$*.{}.d", depDir, location, ext);

		auto cppCompile = String::join(m_toolchain->compilerCxx->getCommand("$<", "$@", m_generateDependencies, dependency, specialization));
		if (!cppCompile.empty())
		{
			std::string pch = pchTarget;

#if defined(CHALET_MACOS)
			if (m_state.info.targetArchitecture() == Arch::Cpu::UniversalMacOS && m_project->usesPch())
			{
				auto baseFolder = String::getPathFolder(pchTarget);
				auto filename = String::getPathFilename(pchTarget);
				auto& lastArch = m_state.info.universalArches().back();
				pch = fmt::format("{}_{}/{}", baseFolder, lastArch, filename);
			}
			else
#endif
			{
				pch = pchTarget;
			}

			ret += fmt::format(R"makefile(
{objDir}/{location}/%.{ext}.o: {location}/%.{ext} {pch} | {depDir}/{location}/%.{ext}.d
	{compileEcho}
	{quietFlag}{cppCompile}
)makefile",
				FMT_ARG(objDir),
				FMT_ARG(depDir),
				FMT_ARG(ext),
				FMT_ARG(location),
				FMT_ARG(pch),
				FMT_ARG(dependency),
				FMT_ARG(compileEcho),
				FMT_ARG(quietFlag),
				FMT_ARG(cppCompile));

			m_locationCache[location].push_back(ext);
		}
	}

	return ret;
}

/*****************************************************************************/
std::string MakefileGeneratorGNU::getObjcRecipe(const std::string& ext)
{
	chalet_assert(m_project != nullptr, "");
	chalet_assert(m_toolchain != nullptr, "");

	std::string ret;

	const bool objectiveC = String::equals({ "m", "M" }, ext); // mm & M imply C++

	const auto quietFlag = getQuietFlag();
	const auto& depDir = m_state.paths.depDir();
	const auto& objDir = m_state.paths.objDir();
	const auto compileEcho = getCompileEchoSources();

	for (auto& location : m_project->locations())
	{
		if (locationExists(location, ext))
			continue;

		const auto dependency = fmt::format("{}/{}/$*.{}.d", depDir, location, ext);

		const auto specialization = objectiveC ? CxxSpecialization::ObjectiveC : CxxSpecialization::ObjectiveCPlusPlus;
		auto objcCompile = String::join(m_toolchain->compilerCxx->getCommand("$<", "$@", m_generateDependencies, dependency, specialization));
		if (!objcCompile.empty())
		{

			ret += fmt::format(R"makefile(
{objDir}/{location}/%.{ext}.o: {location}/%.{ext} | {depDir}/{location}/%.{ext}.d
	{compileEcho}
	{quietFlag}{objcCompile}
)makefile",
				FMT_ARG(objDir),
				FMT_ARG(depDir),
				FMT_ARG(ext),
				FMT_ARG(location),
				FMT_ARG(dependency),
				FMT_ARG(compileEcho),
				FMT_ARG(quietFlag),
				FMT_ARG(objcCompile));

			m_locationCache[location].push_back(ext);
		}
	}

	return ret;
}

/*****************************************************************************/
bool MakefileGeneratorGNU::locationExists(const std::string& location, const std::string& ext) const
{
	if (m_locationCache.find(location) == m_locationCache.end())
		return false;

	bool found = false;
	for (auto& e : m_locationCache.at(location))
	{
		if (e == ext)
		{
			found = true;
			break;
		}
	}

	return found;
}

/*****************************************************************************/
std::string MakefileGeneratorGNU::getTargetRecipe(const std::string& linkerTarget) const
{
	chalet_assert(m_project != nullptr, "");
	chalet_assert(m_toolchain != nullptr, "");

	std::string ret;

	const auto quietFlag = getQuietFlag();

	const auto preReqs = getLinkerPreReqs();

	const auto linkerTargetBase = m_state.paths.getTargetBasename(*m_project);
	const auto linkerCommand = String::join(m_toolchain->getOutputTargetCommand(linkerTarget, { fmt::format("$(OBJS_{})", m_hash) }, linkerTargetBase));
	if (!linkerCommand.empty())
	{
		const auto linkerEcho = getLinkerEcho();
		const auto printer = getPrinter("\\n");

		ret = fmt::format(R"makefile(
{linkerTarget}: {preReqs}
	{linkerEcho}
	{quietFlag}{linkerCommand}
	@{printer}
)makefile",
			FMT_ARG(linkerTarget),
			FMT_ARG(preReqs),
			FMT_ARG(linkerEcho),
			FMT_ARG(quietFlag),
			FMT_ARG(linkerCommand),
			FMT_ARG(printer));
	}

	return ret;
}

/*****************************************************************************/
std::string MakefileGeneratorGNU::getLinkerPreReqs() const
{
	chalet_assert(m_project != nullptr, "");

	std::string ret = fmt::format("$(OBJS_{})", m_hash);

	uint count = 0;
	for (auto& target : m_state.targets)
	{
		if (target->isSources())
		{
			auto& project = static_cast<const SourceTarget&>(*target);
			if (String::equals(project.name(), m_project->name()))
				break;

			/*if (List::contains(m_project->links(), project.name()))
			{
				if (count == 0)
					ret += " |";
				ret += " " + m_state.paths.getTargetFilename(project);
				++count;
			}
			else
			*/
			if (List::contains(m_project->projectStaticLinks(), project.name()))
			{
				if (count == 0)
					ret += " |";
				ret += " " + m_state.paths.getTargetFilename(project);
				++count;
			}
		}
	}

	return ret;
}

/*****************************************************************************/
std::string MakefileGeneratorGNU::getQuietFlag() const
{
	return Output::cleanOutput() ? "@" : "";
}

/*****************************************************************************/
std::string MakefileGeneratorGNU::getFallbackMakeDependsCommand(const std::string& inDependencyFile, const std::string& object, const std::string& source) const
{
	std::string contents = fmt::format("{}: \\\\\\n  {}\\n", object, source);
	return fmt::format("echo \"{contents}\" > \"{inDependencyFile}\"",
		FMT_ARG(contents),
		FMT_ARG(inDependencyFile));
}

/*****************************************************************************/
std::string MakefileGeneratorGNU::getPrinter(const std::string& inPrint, const bool inNewLine) const
{
#if defined(CHALET_WIN32)
	if (inPrint == "\\n")
	{
		return "echo.";
	}
	else if (inPrint.empty())
	{
		return "rem";
	}

	if (inNewLine)
		return fmt::format("echo {}", inPrint);
	else
		return fmt::format("echo|set /p CMD_NOLINE=\"{}\"", inPrint);
#else
	if (inPrint.empty())
	{
		return ":";
	}

	return fmt::format("printf '{}{}'", inPrint, inNewLine ? "\\n" : "");
#endif
}

}
