# Note: Before creating a new major/minor release, update CURRENT_RELEASE_BRANCH

name: Linux (Ubuntu)
on:
  pull_request:
  push:
    branches:
      - main
env:
  CHALET_BIN: bin/x64-linux/chalet
  UBUNTU_VERSION: focal
  DEFAULT_PACKAGES: "zip debhelper uuid-dev ninja-build"
  GENERATE_TIMESTAMP: "echo \"timestamp=$(date +'%Y%m%d%H%M')\" >> $GITHUB_OUTPUT"
  RELEASE_PREFIX: "Chalet"
  IS_BRANCH: ${{ github.ref_type == 'branch' }}
  IS_PRERELEASE: true
  CI: 1
defaults:
  run:
    shell: bash
jobs:
  test-name:
    runs-on: ubuntu-20.04
    steps:
      - name: "Create Timestamp"
        run: ${{ env.GENERATE_TIMESTAMP }}
        id: timestamp
      - name: "Upload"
        uses: ncipollo/release-action@v1
        env:
          BRANCH_RELEASE_NAME: ${{ github.ref_name }}-${{ steps.timestamp.outputs.timestamp }}
        with:
          token: ${{ secrets.RELEASE_GITHUB_TOKEN }}
          name: ${{ env.RELEASE_PREFIX }} ${{ env.IS_BRANCH && env.BRANCH_RELEASE_NAME || github.ref_name }}
          tag: ${{ github.ref_name }}
          commit: ${{ github.sha }}
          allowUpdates: true
          generateReleaseNotes: true
          omitBodyDuringUpdate: true
          omitDraftDuringUpdate: true
          omitNameDuringUpdate: true
          omitPrereleaseDuringUpdate: true
          draft: true
          prerelease: ${{ env.IS_PRERELEASE == 'true' }}
  x86_64-linux-gnu:
    runs-on: ubuntu-20.04
    env:
      ARCH: amd64
      TRIPLET: x86_64-linux-gnu
    steps:
      - name: "Create Timestamp"
        run: ${{ env.GENERATE_TIMESTAMP }}
        id: timestamp
      - name: "Checkout"
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - name: "Get Packages"
        run: |
          sudo apt update
          sudo apt install ${{ env.DEFAULT_PACKAGES }}
      - name: "Color Test"
        run: ${{ env.CHALET_BIN }} termtest
      - name: "Fetch Dependencies"
        run: bash ./fetch_externals.sh
      - name: "Build"
        run: ${{ env.CHALET_BIN }} -c Release -t ${{ env.TRIPLET }}-gcc -b native bundle
      - name: "Run: Tests"
        run: ${{ env.CHALET_BIN }} run tests
      - name: "Upload"
        uses: ncipollo/release-action@v1
        env:
          BRANCH_RELEASE_NAME: ${{ github.ref_name }}-${{ steps.timestamp.outputs.timestamp }}
        with:
          token: ${{ secrets.RELEASE_GITHUB_TOKEN }}
          name: ${{ env.RELEASE_PREFIX }} ${{ env.IS_BRANCH && env.BRANCH_RELEASE_NAME || github.ref_name }}
          tag: ${{ github.ref_name }}
          commit: ${{ github.sha }}
          allowUpdates: true
          generateReleaseNotes: true
          omitBodyDuringUpdate: true
          omitDraftDuringUpdate: true
          omitNameDuringUpdate: true
          omitPrereleaseDuringUpdate: true
          artifacts: |
            dist/chalet-*-linux-gnu*.zip
            dist/chalet_*.deb
          draft: true
          prerelease: ${{ env.IS_PRERELEASE == 'true' }}
  arm64-linux-gnu:
    runs-on: ubuntu-20.04
    env:
      ARCH: arm64
      TRIPLET: aarch64-linux-gnu
      CROSS_BUILD: true
    steps:
      - name: "Create Timestamp"
        run: ${{ env.GENERATE_TIMESTAMP }}
        id: timestamp
      - name: "Checkout"
        uses: actions/checkout@v4
        with:
          ref: ${{ env.github.ref }}
      - name: "Setup"
        if: ${{ env.CROSS_BUILD == 'true' }}
        run: |
          sudo sed -i "s|deb mirror|deb [arch=amd64,i386] mirror|g" /etc/apt/sources.list
          echo "deb [arch=${{ env.ARCH }}] http://ports.ubuntu.com/ $UBUNTU_VERSION main restricted" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=${{ env.ARCH }}] http://ports.ubuntu.com/ $UBUNTU_VERSION-updates main restricted" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=${{ env.ARCH }}] http://ports.ubuntu.com/ $UBUNTU_VERSION universe" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=${{ env.ARCH }}] http://ports.ubuntu.com/ $UBUNTU_VERSION-updates universe" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=${{ env.ARCH }}] http://ports.ubuntu.com/ $UBUNTU_VERSION multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=${{ env.ARCH }}] http://ports.ubuntu.com/ $UBUNTU_VERSION-updates multiverse" | sudo tee -a /etc/apt/sources.list
          sudo dpkg --add-architecture ${{ env.ARCH }}
      - name: "Get Packages"
        run: |
          sudo apt update
          sudo apt install ${{ env.DEFAULT_PACKAGES }}
      - name: "Get Packages (${{ env.ARCH }})"
        if: ${{ env.CROSS_BUILD == 'true' }}
        run: sudo apt install uuid-dev:${{ env.ARCH }} gcc-${{ env.TRIPLET }} g++-${{ env.TRIPLET }} binutils-${{ env.TRIPLET }}
      - name: "Color Test"
        run: ${{ env.CHALET_BIN }} termtest
      - name: "Fetch Dependencies"
        run: bash ./fetch_externals.sh
      - name: "Build"
        run: ${{ env.CHALET_BIN }} -c Release -t ${{ env.TRIPLET }}-gcc -b native bundle
      - name: "Upload"
        uses: ncipollo/release-action@v1
        env:
          BRANCH_RELEASE_NAME: ${{ github.ref_name }}-${{ steps.timestamp.outputs.timestamp }}
        with:
          token: ${{ secrets.RELEASE_GITHUB_TOKEN }}
          name: ${{ env.RELEASE_PREFIX }} ${{ env.IS_BRANCH && env.BRANCH_RELEASE_NAME || github.ref_name }}
          tag: ${{ github.ref_name }}
          commit: ${{ github.sha }}
          allowUpdates: true
          generateReleaseNotes: true
          omitBodyDuringUpdate: true
          omitDraftDuringUpdate: true
          omitNameDuringUpdate: true
          omitPrereleaseDuringUpdate: true
          artifacts: |
            dist/chalet-*-linux-gnu*.zip
            dist/chalet_*.deb
          draft: true
          prerelease: ${{ env.IS_PRERELEASE == 'true' }}
  arm-linux-gnueabihf:
    runs-on: ubuntu-20.04
    env:
      ARCH: armhf
      TRIPLET: arm-linux-gnueabihf
      CROSS_BUILD: true
    steps:
      - name: "Create Timestamp"
        run: ${{ env.GENERATE_TIMESTAMP }}
        id: timestamp
      - name: "Checkout"
        uses: actions/checkout@v4
        with:
          ref: ${{ env.github.ref }}
      - name: "Setup"
        if: ${{ env.CROSS_BUILD == 'true' }}
        run: |
          sudo sed -i "s|deb mirror|deb [arch=amd64,i386] mirror|g" /etc/apt/sources.list
          echo "deb [arch=${{ env.ARCH }}] http://ports.ubuntu.com/ $UBUNTU_VERSION main restricted" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=${{ env.ARCH }}] http://ports.ubuntu.com/ $UBUNTU_VERSION-updates main restricted" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=${{ env.ARCH }}] http://ports.ubuntu.com/ $UBUNTU_VERSION universe" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=${{ env.ARCH }}] http://ports.ubuntu.com/ $UBUNTU_VERSION-updates universe" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=${{ env.ARCH }}] http://ports.ubuntu.com/ $UBUNTU_VERSION multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=${{ env.ARCH }}] http://ports.ubuntu.com/ $UBUNTU_VERSION-updates multiverse" | sudo tee -a /etc/apt/sources.list
          sudo dpkg --add-architecture ${{ env.ARCH }}
      - name: "Get Packages"
        run: |
          sudo apt update
          sudo apt install ${{ env.DEFAULT_PACKAGES }}
      - name: "Get Packages (${{ env.ARCH }})"
        if: ${{ env.CROSS_BUILD == 'true' }}
        run: sudo apt install uuid-dev:${{ env.ARCH }} gcc-${{ env.TRIPLET }} g++-${{ env.TRIPLET }} binutils-${{ env.TRIPLET }}
      - name: "Color Test"
        run: ${{ env.CHALET_BIN }} termtest
      - name: "Fetch Dependencies"
        run: bash ./fetch_externals.sh
      - name: "Build"
        run: ${{ env.CHALET_BIN }} -c Release -t ${{ env.TRIPLET }}-gcc -b native bundle
      - name: "Upload"
        uses: ncipollo/release-action@v1
        env:
          BRANCH_RELEASE_NAME: ${{ github.ref_name }}-${{ steps.timestamp.outputs.timestamp }}
        with:
          token: ${{ secrets.RELEASE_GITHUB_TOKEN }}
          name: ${{ env.RELEASE_PREFIX }} ${{ env.IS_BRANCH && env.BRANCH_RELEASE_NAME || github.ref_name }}
          tag: ${{ github.ref_name }}
          commit: ${{ github.sha }}
          allowUpdates: true
          generateReleaseNotes: true
          omitBodyDuringUpdate: true
          omitDraftDuringUpdate: true
          omitNameDuringUpdate: true
          omitPrereleaseDuringUpdate: true
          artifacts: |
            dist/chalet-*-linux-gnu*.zip
            dist/chalet_*.deb
          draft: true
          prerelease: ${{ env.IS_PRERELEASE }}