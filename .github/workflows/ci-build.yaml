name: Chalet Release

on:
  push:
    tags:
      - "v*"
  release:
    types: [created]

jobs:
  Release:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: "Create Release"
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Chalet ${{ github.ref }}
          draft: false
          prerelease: true
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
  Linux-Ubuntu:
    needs: Release
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
      CC: gcc-10
      CXX: g++-10
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
      - name: "Get GCC 10"
        run: |
          sudo apt update
          sudo apt install gcc-10 g++-10 zip ninja-build gcc-arm-linux-gnueabihf binutils-arm-linux-gnueabi
      - name: "Fetch Dependencies"
        run: bash ./fetch_vendors.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: "Build: Debug"
        run: bash ./build.sh Debug
      - name: "Color Test"
        run: build/Debug/chalet-debug colortest
      - name: "Build: Release (x86_64)"
        run: build/Debug/chalet-debug --save-schema bundle
      - name: "Run: Tests"
        run: build/x86_64-linux-gnu_Release/chalet -c Release run tests_chalet
      - name: "Zip binary (x86_64)"
        uses: papeloto/action-zip@v1
        with:
          files: build/x86_64-linux-gnu_Release/chalet schema/chalet-settings.schema.json schema/chalet.schema.json dist/chalet-completion.sh LICENSE.txt README.md
          dest: dist/chalet-x86_64-linux-gnu.zip
      - name: "Upload assets (x86_64)"
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ./dist/chalet-x86_64-linux-gnu.zip
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: "Build: Release (arm)"
        run: build/x86_64-linux-gnu_Release/chalet -t arm-linux-gnueabihf-gcc build arm-linux-gnueabihf_Release
      - name: "Zip binary (arm)"
        uses: papeloto/action-zip@v1
        with:
          files: build/arm-linux-gnueabihf_Release/chalet schema/chalet-settings.schema.json schema/chalet.schema.json dist/chalet-completion.sh LICENSE.txt README.md
          dest: dist/chalet-arm-linux-gnueabihf.zip
      - name: "Upload assets"
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ./dist/chalet-arm-linux-gnueabihf.zip
          token: ${{ secrets.GITHUB_TOKEN }}
  MacOS:
    needs: Release
    runs-on: macos-latest
    defaults:
      run:
        shell: bash
    env:
      MACOS_SIGNING_IDENTITY: ${{ secrets.MACOS_SIGNING_IDENTITY }}
    steps:
      - name: "Prepare Environment for Signing"
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.MACOS_CERTIFICATE }}
          p12-password: ${{ secrets.MACOS_CERTIFICATE_PWD }}
      - name: "Checkout"
        uses: actions/checkout@v2
      - name: "Fetch Dependencies"
        run: bash ./fetch_vendors.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: "Build: Debug"
        run: bash ./build.sh Debug
      - name: "Configure Chalet"
        run: |
          build/Debug/chalet-debug configure
          build/Debug/chalet-debug set settings.signingIdentity $MACOS_SIGNING_IDENTITY
      - name: "Color Test"
        run: build/Debug/chalet-debug colortest
      - name: "Build: Release"
        run: build/Debug/chalet-debug --save-schema --arch universal bundle
      - name: "Run: Tests"
        run: build/universal-apple-darwin_Release/chalet -c Release run tests_chalet
      - name: "Zip binary"
        uses: papeloto/action-zip@v1
        with:
          files: dist/chalet schema/chalet-settings.schema.json schema/chalet.schema.json dist/chalet-completion.sh LICENSE.txt README.md
          dest: dist/chalet-universal-apple-darwin.zip
      - name: "Upload assets"
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ./dist/chalet-universal-apple-darwin.zip
          token: ${{ secrets.GITHUB_TOKEN }}
  Windows-MSVC:
    needs: Release
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: "Get MSVC Environment"
        uses: ilammy/msvc-dev-cmd@v1
      - name: "Checkout"
        uses: actions/checkout@v2
      - name: "Fetch Dependencies"
        run: bash ./fetch_vendors.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: "Build: Debug"
        run: ./build.bat Debug
      - name: "Color Test"
        run: build/msvc_Debug/chalet-debug colortest
      - name: "Build: Release"
        run: build/msvc_Debug/chalet-debug --save-schema -t vs-stable -a x64 bundle
      - name: "Run: Tests"
        run: build/msvc_Debug/chalet-debug -c Release run tests_chalet
      - name: "Zip binary"
        uses: papeloto/action-zip@v1
        with:
          files: dist/chalet.exe schema/chalet-settings.schema.json schema/chalet.schema.json dist/chalet-completion.sh LICENSE.txt README.md
          dest: dist/chalet-x64-pc-windows-msvc.zip
      - name: "Make NSIS Installer"
        uses: joncloud/makensis-action@v3.5
        with:
          script-file: "platform/windows/installer/install_script.nsi"
          additional-plugin-paths: platform/windows/installer/plugins/Plugins
          arguments: "/WX /V3 /NOCD"
      - name: "Zip installer"
        uses: papeloto/action-zip@v1
        with:
          files: dist/chalet-windows-installer.exe LICENSE.txt README.md
          dest: dist/chalet-x64-pc-windows-msvc-installer.zip
      - name: "Upload assets"
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ./dist/chalet-x64-pc-windows-msvc.zip
            ./dist/chalet-x64-pc-windows-msvc-installer.zip
          token: ${{ secrets.GITHUB_TOKEN }}
  # Windows-MSYS2:
  #   needs: Release
  #   runs-on: windows-latest
  #   defaults:
  #     run:
  #       shell: msys2 {0}
  #   steps:
  #     - name: "Get MSYS2"
  #       uses: msys2/setup-msys2@v2
  #       with:
  #         update: true
  #         install: >-
  #           base-devel
  #           git
  #           zip
  #           mingw-w64-x86_64-toolchain
  #           mingw-w64-x86_64-cmake
  #           mingw-w64-x86_64-ninja
  #     - name: "Checkout"
  #       uses: actions/checkout@v2
  #     - name: "Fetch Dependencies"
  #       run: bash ./fetch_vendors.sh
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     - name: "Build: Debug"
  #       run: bash ./build.sh Debug
  #     - name: "Color Test"
  #       run: build/Debug/chalet-debug colortest
  #     - name: "Build: Release"
  #       run: build/Debug/chalet-debug --save-schema -t gcc bundle
  #     - name: "Run: Tests"
  #       run: build/x86_64-w64-mingw32_Release/chalet -c Release run tests_chalet
  #     - name: "Zip binary"
  #       uses: papeloto/action-zip@v1
  #       with:
  #         files: dist/chalet.exe schema/chalet-settings.schema.json schema/chalet.schema.json dist/chalet-completion.sh LICENSE.txt README.md
  #         dest: dist/chalet-windows-mingw64.zip
  #     - name: "Make NSIS Installer"
  #       uses: joncloud/makensis-action@v3.5
  #       with:
  #         script-file: "platform/windows/installer/install_script.nsi"
  #         additional-plugin-paths: platform/windows/installer/plugins/Plugins
  #         arguments: "/WX /V3 /NOCD"
  #     - name: "Zip installer"
  #       uses: papeloto/action-zip@v1
  #       with:
  #         files: dist/chalet-windows-installer.exe LICENSE.txt README.md
  #         dest: dist/chalet-windows-mingw64-installer.zip
  #     - name: "Upload assets"
  #       uses: softprops/action-gh-release@v1
  #       if: startsWith(github.ref, 'refs/tags/')
  #       with:
  #         files: |
  #           ./dist/chalet-windows-mingw64.zip
  #           ./dist/chalet-windows-mingw64-installer.zip
  #         token: ${{ secrets.GITHUB_TOKEN }}
