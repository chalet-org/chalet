name: Chalet Release

on:
  push:
    tags:
      - "v*"
  release:
    types: [created]

jobs:
  Release:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: "Create Release"
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Chalet ${{ github.ref }}
          draft: false
          prerelease: true
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
  Linux-Ubuntu:
    needs: Release
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
      CC: gcc-10
      CXX: g++-10
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
      - name: "Get GCC 10"
        run: |
          sudo apt update
          sudo apt install gcc-10 g++-10 zip
      - name: "Fetch Dependencies"
        run: bash ./fetch_vendors.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: "Build: Debug"
        run: bash ./build.sh Debug
      - name: "Build: Release"
        run: build/Debug/chalet-debug --save-schema bundle
      - name: "Run: Tests"
        run: build/x86_64-linux-gnu_Release/chalet run Release tests_chalet
      - name: "Zip binary"
        uses: papeloto/action-zip@v1
        with:
          files: dist/chalet LICENSE.txt
          dest: dist/chalet-linux-ubuntu.zip
      - name: "Upload binary"
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.Release.outputs.upload_url }}
          asset_path: ./dist/chalet-linux-ubuntu.zip
          asset_name: chalet-linux-ubuntu.zip
          asset_content_type: application/zip
  MacOS:
    needs: Release
    runs-on: macos-latest
    defaults:
      run:
        shell: bash
    env:
      MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
      MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
      MACOS_SIGNING_IDENTITY: ${{ secrets.MACOS_SIGNING_IDENTITY }}
      MACOS_SIGNING_IDENTITY_PWD: ${{ secrets.MACOS_SIGNING_IDENTITY_PWD }}
    steps:
      - name: "Prepare Environment for Signing"
        run: |
          echo $MACOS_CERTIFICATE | base64 â€”decode > certificate.p12
          security create-keychain -p $MACOS_SIGNING_IDENTITY_PWD build.keychain security default-keychain -s build.keychain
          security unlock-keychain -p $MACOS_SIGNING_IDENTITY_PWD build.keychain
          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $MACOS_SIGNING_IDENTITY_PWD build.keychain
      - name: "Checkout"
        uses: actions/checkout@v2
      - name: "Fetch Dependencies"
        run: bash ./fetch_vendors.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: "Build: Debug"
        run: bash ./build.sh Debug
      - name: "Configure Chalet"
        run: |
          build/Debug/chalet-debug configure
          build/Debug/chalet-debug set settings.macosSigningIdentity $MACOS_SIGNING_IDENTITY
      - name: "Build: Release"
        run: build/Debug/chalet-debug --save-schema bundle
      - name: "Run: Tests"
        run: build/x86_64-apple-darwin_Release/chalet run Release tests_chalet
      - name: "Zip binary"
        uses: papeloto/action-zip@v1
        with:
          files: dist/chalet LICENSE.txt
          dest: dist/chalet-macos-universal.zip
      - name: "Upload binary"
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.Release.outputs.upload_url }}
          asset_path: ./dist/chalet-macos-universal.zip
          asset_name: chalet-macos-universal.zip
          asset_content_type: application/zip
  Windows-MSVC:
    needs: Release
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: "Get MSVC Environment"
        uses: ilammy/msvc-dev-cmd@v1
      - name: "Setup Ninja"
        uses: ashutoshvarma/setup-ninja@master
      - name: "Checkout"
        uses: actions/checkout@v2
      - name: "Fetch Dependencies"
        run: bash ./fetch_vendors.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: "Build: Debug"
        run: ./build.bat Debug
      - name: "Build: Release"
        run: build/Debug/chalet-debug --save-schema -t msvc bundle
      - name: "Run: Tests"
        run: build/x86_64-ms-windows-msvc_Release/chalet run Release tests_chalet
      - name: "Zip binary"
        uses: papeloto/action-zip@v1
        with:
          files: dist/chalet.exe LICENSE.txt
          dest: dist/chalet-windows-msvc64.zip
      - name: "Upload binary"
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.Release.outputs.upload_url }}
          asset_path: ./dist/chalet-windows-msvc64.zip
          asset_name: chalet-windows-msvc64.zip
          asset_content_type: application/zip
  Windows-MSYS2:
    needs: Release
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: "Get MSYS2"
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            base-devel
            git
            zip
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
      - name: "Checkout"
        uses: actions/checkout@v2
      - name: "Fetch Dependencies"
        run: bash ./fetch_vendors.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: "Build: Debug"
        run: bash ./build.sh Debug
      - name: "Build: Release"
        run: build/Debug/chalet-debug --save-schema -t gcc bundle
      - name: "Run: Tests"
        run: build/x86_64-w64-mingw32_Release/chalet run Release tests_chalet
      - name: "Zip binary"
        uses: papeloto/action-zip@v1
        with:
          files: dist/chalet.exe LICENSE.txt
          dest: dist/chalet-windows-mingw64.zip
      - name: "Upload binary"
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.Release.outputs.upload_url }}
          asset_path: ./dist/chalet-windows-mingw64.zip
          asset_name: chalet-windows-mingw64.zip
          asset_content_type: application/zip
